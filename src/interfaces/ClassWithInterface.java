package interfaces;

/*
 * Этот класс реализует интерфейс, который объявлен в этом пакете
 * 
 * Чтобы добавить интерфейс к классу нужно указать ключевое слово
 * implements в его объявлении.
 * 
 * Если класс реализует сразу несколько интерфейсов, то они разделяются
 * запятыми. Если класс является подклассом, то суперкласс должен быть
 * определен раньше интерфейсов, т.е.
 * 
 * [доступ] class имя_класса [extends суперкласс] [implements интерфейс_1[, интерфейс_2 ...]] {}
 * 
 * Основным преимуществом интерфейса является то, что вы можете создавать ссылки на интерфейсы
 * и присваивать этим ссылкам объекты на классы, которые этот интерфейс реализуют.
 * 
 * Минусом интерфейсов является то, что динамическое разрешение ссылки отнимает
 * процессорное время, что сказывается на производительности. Интерфейсы следует использовать
 * там, где они нужны, и не в процессах, где важна скорость.
 * 
 */

public class ClassWithInterface implements Callback {
	
	/*
	 * Методы, реализующие интерфейс должны быть публичными.
	 * Сигнатура методов интерфейса должна в точности совпадать в классе.
	 */
	public void callback(int param) {
		System.out.println("callback with" + param);
	}
	
	/*
	 * Метод, который не является частью интерфейса
	 */
	
	public void noninterface() {
		System.out.println("noninterdace method");
	}
}

/*
 * Абстрактные классы могут наследовать интерфейсы и при этом не реализовывать их (это называется
 * частичной реализацией интерфейса). Классы, которые наследуют абстрактные классы, 
 * должны реализовывать интерфейс как обычно.
 */

abstract class Incomplete implements Callback {
	
}

