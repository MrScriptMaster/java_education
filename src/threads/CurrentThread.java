package threads;

/*
 * Управлять потоками в Java можно с помощью класса Thread. Когда запускается любая программа Java
 * она имеет по меньшей мере один главный поток. В многопоточных приложениях главный поток порождает
 * дочерние и, как правило, завершается последним, дожидаясь завершения всех дочерних потоков.
 */

public class CurrentThread {
	public static void main(String[] args)
	{
		/*
		 * Чтобы получить ссылку на экземпляр класса Thread текущего потока необходимо
		 * воспользоваться следующим методом
		 */
		
		Thread curThr = Thread.currentThread();
		
		/*
		 * Метод println выводит поток в формате [имя потока, приоритет, группа потока]
		 * По умолчанию потоки запускаются с приоритетом 5.
		 */
		System.out.println("Текущий поток: " + curThr);
		// Можно изменить имя текущего потока
		curThr.setName("My Thread");
		System.out.println("Текущий поток переименован в " + curThr);
		
		/*
		 * Создаем дочерний поток, который мы реализуем классом CustomThread
		 */
		
		new CustomThread();
		
		try
		{
			/*
			 * Этот цикл выводит числа с задержкой в 1 секунду
			 */
			for (int n = 5; n > 0; n--)
			{
				System.out.println(n);
				Thread.sleep(1000);
			}
			
		} catch (InterruptedException e) {
			
			/*
			 * Метод sleep может возбуждать исключение типа InterrupException, если другой поток
			 * запрашивает прерывание.
			 */
			System.out.println("Поток исполнения был прерван");
		}
		
		System.out.println("Завершился основной поток");
		
	}
}
