package excrptions;

/*
 * Исключения в Java имеют следующую структуру
 * 
 * Throwable -> Error
 *         |
 *          -> Exception -> RuntimeException
 *          
 * В Java существует множество исключений, которые не обрабатываются явно - 
 * стандартные исключения. Они делятся на Ошибки, Исключения времени исполнения,
 * Простое исключение.
 * 
 */

public class Exceptions {
	void DivideByZero ()
	{
		/*
		 * Чтобы перехватить исключения, инструкции, которые могут их
		 * возбуждать, должны быть описаны в блоке try...catch.
		 * 
		 */
		
		try
		{
			int d = 0;
			int a = 5 / d;
			
			/*
			 * Вы можете вложить несколько try...catch в другой
			 * 
			 * Внутренний try может не иметь catch - в этом случае обработка
			 * исключения будет передаваться на уровень выше. Если ни один из вложенных
			 * catch не может обработать полученное исключение из вложенного
			 * try, то исключение будет передано на уровень выше.
			 */
			
			try
			{
				a /= d;
			}
			finally
			{
				// Этот finally должен выполниться после выхода из try
			}
		}
		/*
		 * В данном случае мы знаем, что будет возбуждено исключение класса
		 * ArithmeticException, поэтому блок catch мы можем описать подробно
		 */
		catch (ArithmeticException e)
		{
			System.out.println("Деление на нуль.");
			/*
			 * Вы можете выводить сообщения исключения, передавая
			 * его println напрямую.
			 */
			System.out.println(e);
		}
		/*
		 * В этой секции мы перехватываем любое исключение. Запомните, что
		 * подклассы исключений должны перехватываться от самого глубокого
		 * до самого верхнего, так как блок Exception суперкласса будет перехватывать
		 * исключения и подклассов, наследующих от него.
		 */
		catch (Exception e)
		{
			System.out.println("Перехвачено некоторое исключение.");
		}
		/*
		 * Обработка исключений нарушает нормальное исполнение программы.
		 * Если после обработки исключения необходимо совершить какие-либо действия,
		 * например освободить ресурсы, то эти действия следует записать в блок
		 * finally.
		 */
		finally
		{
			/*
			 * Блок finally исполняется в следующих случаях:
			 * 
			 * - когда происходит выход из метода из блока try
			 * - когда обработка исключения передается на уровень выше через throw,
			 *   приводя к выходу из метода, или когда исключение просто
			 *   не обрабатывается в это try.
			 * - Если блок try не перехватывает исключения, но он имеет
			 *   секцию finally, то блок finally выполнится сразу после
			 *   выхода из try.
			 */
			System.out.println("Блок finally.");
		}
		/*
		 * После обработки исключения, программа продолжает исполняться с этой
		 * инструкции.
		 */
		System.out.println("После обработки исключения.");
	}
	
	/*
	 * В объявлении метода мы показываем, какие исключения не обрабатываются
	 * в методе, но могут быть возбуждены внутри
	 */
	void ThrowExcp(boolean bbb) throws NullPointerException, ArithmeticException
	{
		/*
		 * Чтобы сгенерировать исключение необходимо
		 * использовать специальное ключевое слово throw.
		 * 
		 * Если метод может генерировать исключения, но при этом сам их не
		 * обрабатывает, то это должно быть отменено в объявлении метода.
		 * 
		 * 
		 */
		
		if (bbb)
		{
			throw new NullPointerException();
		}
		else
		{
			throw new ArithmeticException();
		}
	}
	
	/*
	 * С версии 4 в Java можно вводить цепочки исключений, когда исключение может хранить причину,
	 * по которой это искдючение было возбуждено. Одно исключение может иметь только одну причину, но
	 * вы можете вкладывать исключения друг в друга так, что образуется цепочка.
	 */
	
	void DemoExc()
	{
		NullPointerException e = new NullPointerException("верхний уровень");
		
		e.initCause(new ArithmeticException("причина"));
	}
}


